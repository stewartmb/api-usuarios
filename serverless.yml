org: stewartmaquera
service: api-usuarios

provider:
  name: aws
  runtime: python3.12
  memorySize: 1024
  timeout: 29
  iam:
    role: arn:aws:iam::630606600000:role/LabRole
  environment:
    TABLE_NAME: ${sls:stage}-t_usuarios
    TOKENS_TABLE: ${sls:stage}-t_tokens_acceso

package:
  individually: true  # Empaquetar cada Lambda individualmente

functions:
  crearUsuario:
    handler: crear_usuario.lambda_handler
    events:
      - http:
          path: /usuarios/crear
          method: post
          cors: true
          integration: lambda
          request:
            templates:
              application/json: |
                {
                  "method": "$context.httpMethod",
                  "path": "$context.resourcePath",
                  "headers": {
                    "Authorization": "$input.params('Authorization')"
                  },
                  "body": $input.json('$')
                }

  loginUsuario:
    handler: login_usuario.lambda_handler
    events:
      - http:
          path: /usuarios/login
          method: post
          cors: true
          integration: lambda
          request:
            templates:
              application/json: |
                {
                  "method": "$context.httpMethod",
                  "path": "$context.resourcePath",
                  "headers": {
                    "Authorization": "$input.params('Authorization')"
                  },
                  "body": $input.json('$')
                }

  eliminarUsuario:
    handler: eliminar_usuario.lambda_handler
    events:
      - http:
          path: /usuarios/eliminar
          method: delete
          cors: true
          integration: lambda
          request:
            templates:
              application/json: |
                {
                  "method": "$context.httpMethod",
                  "path": "$context.resourcePath",
                  "headers": {
                    "Authorization": "$input.params('Authorization')"
                  },
                  "body": $input.json('$')
                }

  obtenerPerfil:
    handler: obtener_perfil.lambda_handler
    events:
      - http:
          path: /usuarios/obtener
          method: get
          cors: true
          integration: lambda
          request:
            templates:
              application/json: |
                {
                  "method": "$context.httpMethod",
                  "path": "$context.resourcePath",
                  "headers": {
                    "Authorization": "$input.params('Authorization')"
                  },
                  "body": $input.json('$')
                }

resources:
  Resources:
    UsuariosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${sls:stage}-t_usuarios
        AttributeDefinitions:
          - AttributeName: tenant_id#user_id
            AttributeType: S
          - AttributeName: role
            AttributeType: S
        KeySchema:
          - AttributeName: tenant_id#user_id
            KeyType: HASH
          - AttributeName: role
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    TokensTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${sls:stage}-t_tokens_acceso
        AttributeDefinitions:
          - AttributeName: token
            AttributeType: S
        KeySchema:
          - AttributeName: token
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
